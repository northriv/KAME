#MIN_CONFIG(3)

AM_INIT_AUTOMAKE(kame,2.0)

AC_LANG_CPLUSPLUS

dnl CXXFLAGS="$NOOPT_CXXFLAGS" dnl __kdevelop[noopt]__
dnl CFLAGS="$NOOPT_CFLAGS" dnl __kdevelop[noopt]__
CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS" dnl __kdevelop[exc]__

dnl KDE_NEED_FLEX dnl __kdevelop__
dnl AC_PROG_YACC dnl __kdevelop__

AC_MSG_CHECKING(for freetype2)
if freetype-config --libs > /dev/null 2>&1; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR([freetype not installed - please install first])
fi
FREETYPE2_LIBS="`freetype-config --libs`"
FREETYPE2_CFLAGS="`freetype-config --cflags`"

ac_save_LIBS="$LIBS"
AC_CHECK_LIB(fftw, main, fftw_libs="-lfftw",
  AC_MSG_ERROR([fftw not installed - please install first]))
FFTW_LIBS="$FFTW_LIBS $fftw_libs"
LIBS="$ac_save_LIBS"

AC_MSG_CHECKING(for gsl)
if gsl-config --libs > /dev/null 2>&1; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR([gsl not installed - please install first])
fi
GSL_LIBS="`gsl-config --libs`"

ac_save_LIBS="$LIBS"
RUBY_INCLUDE_PATH="`find /usr/lib/ruby -name 'ruby.h'`"
RUBY_INCLUDES="-I`echo $RUBY_INCLUDE_PATH |sed -e 's/ruby.h//'`"
AC_CHECK_LIB(ruby, main, ruby_libs="-lruby" ruby_cflags=$RUBY_INCLUDES,
  AC_MSG_ERROR([ruby not installed - please install first]))
RUBY_LIBS="$RUBY_LIBS $ruby_libs"
RUBY_CFLAGS="$RUBY_CFLAGS $ruby_cflags"
LIBS="$ac_save_LIBS"

AC_MSG_CHECKING(for NI-DAQmx)
if test -f /usr/local/lib/libnidaqmx.so ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE([HAVE_NI_DAQMX], 1, [Define if you have 'NI-DAQmx' library])
  NIDAQMX_LIBS="-L/usr/local/lib -lnidaqmx"
  NIDAQMX_CFLAGS="-I/usr/local/include"
else
  AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for linux-gpib)
if test -f /usr/local/lib/libgpib.so ; then
  AC_MSG_RESULT(yes)
  AC_DEFINE([HAVE_LINUX_GPIB], 1, [Define if you have 'linux-gpib' library])
  LINUXGPIB_LIBS="-L/usr/local/lib -lgpib"
  LINUXGPIB_CFLAGS="-I/usr/local/include/gpib"
else
  AC_MSG_RESULT(no)
fi

AC_ARG_WITH(gc, 
[  --with-gc         use garbage collector],
	ac_save_LIBS="$LIBS"
	AC_CHECK_LIB(gccpp, main, 
	  gc_libs="-lgccpp -lgc" \
	  AC_DEFINE([HAVE_LIBGCCPP], 1, [Define if you want to use 'gc, gccpp' library to detect memory leaks]),
	  AC_MSG_WARN([gc or gccpp is not installed - gc is disabled]), -lgc)
	GC_LIBS="$GC_LIBS $gc_libs"
	LIBS="$ac_save_LIBS"
)

AC_ARG_WITH(malloc-debug, 
[  --with-malloc-debug         use MallocDebug.app],
	ac_save_LIBS="$LIBS"
	AC_CHECK_LIB(MallocDebug, main, 
	  malloc_debug_libs="-lMallocDebug" \
	  AC_DEFINE([HAVE_LIBMALLOCDEBUG], 1, [Define if you want to use 'MallocDebug.app']),
	  AC_MSG_WARN([libMallocDebug.a is not installed - MallocDebug is disabled]), -lMallocDebug)
	MALLOC_DEBUG_LIBS="$MALLOC_DEBUG_LIBS $malloc_debug_libs"
	LIBS="$ac_save_LIBS"
)

AC_C_BIGENDIAN
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)

AC_SUBST(GSL_LIBS)
AC_SUBST(FFTW_LIBS)
AC_SUBST(NIDAQMX_LIBS)
AC_SUBST(NIDAQMX_CFLAGS)
AC_SUBST(LINUXGPIB_LIBS)
AC_SUBST(LINUXGPIB_CFLAGS)
AC_SUBST(RUBY_LIBS)
AC_SUBST(RUBY_CFLAGS)
AC_SUBST(FREETYPE2_LIBS)
AC_SUBST(FREETYPE2_CFLAGS)
AC_SUBST(GC_LIBS)
AC_SUBST(MALLOC_DEBUG_LIBS)

CPPFLAGS="$CPPFLAGS $RUBY_CFLAGS $FREETYPE2_CFLAGS"
