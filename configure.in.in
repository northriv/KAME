#MIN_CONFIG(3)

AM_INIT_AUTOMAKE([kame],2.3)

AC_LANG_CPLUSPLUS

CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS"

ac_save_LIBS="$LIBS"
AC_CHECK_LIB(ltdl, main, ltdl_libs="-lltdl",
  AC_MSG_ERROR([libtool-ltdl not installed - please install first]))
LTDL_LIBS="$LTDL_LIBS $ltdl_libs"
LIBS="$ac_save_LIBS"

AC_MSG_CHECKING(for freetype2)
if freetype-config --libs > /dev/null 2>&1; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR([freetype not installed - please install first])
fi
FREETYPE2_LIBS="`freetype-config --libs`"
FREETYPE2_CFLAGS="`freetype-config --cflags`"

ac_save_LIBS="$LIBS"
AC_CHECK_LIB(fftw3, main, fftw_libs="-lfftw3",
  AC_MSG_ERROR([FFTW3 not installed - please install first]))
FFTW_LIBS="$FFTW_LIBS $fftw_libs"
LIBS="$ac_save_LIBS"

AC_MSG_CHECKING(for gsl)
if gsl-config --libs > /dev/null 2>&1; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR([gsl not installed - please install first])
fi
GSL_LIBS="`gsl-config --libs`"

ac_save_LIBS="$LIBS"
RUBY_INCLUDE_PATH="`find /usr/lib/ruby/ -name 'ruby.h'`"
RUBY_INCLUDES="`if test -n "$RUBY_INCLUDE_PATH"; then echo -I$RUBY_INCLUDE_PATH; fi |sed -e 's/ruby.h//'`"
AC_CHECK_LIB(ruby, main, ruby_libs="-lruby" ruby_cflags=$RUBY_INCLUDES,
  AC_MSG_ERROR([ruby not installed - please install first]))
RUBY_LIBS="$RUBY_LIBS $ruby_libs"
RUBY_CFLAGS="$RUBY_CFLAGS $ruby_cflags"
LIBS="$ac_save_LIBS"

ac_save_LIBS="$LIBS"
AC_CHECK_LIB(nidaqmx, main, 
nidaqmx_libs="-L/usr/local/lib -lnidaqmx"
nidaqmx_cflags="-I/usr/local/include"
AC_DEFINE([HAVE_NI_DAQMX], 1, [Define if you have 'NI-DAQmx' library]),
AC_MSG_WARN([NIDAQmx is not installed - NIDAQmx is disabled]), -L/usr/local/lib -lnidaqmx)
NIDAQMX_LIBS="$nidaqmx_libs"
NIDAQMX_CFLAGS="$nidaqmx_cflags"
LIBS="$ac_save_LIBS"

AC_CHECK_LIB(gpib, main, 
	gpib_libs="-lgpib"\
	  AC_DEFINE([HAVE_LINUX_GPIB], 1, [Define if you have 'linux-gpib' library]),
	  AC_MSG_WARN([linux-gpib is not installed - gpib is disabled]), -lgpib)
LINUXGPIB_LIBS="$gpib_libs"

ac_save_LIBS="$LIBS"
AC_CHECK_LIB(lapack, main, 
lapack_libs="-L/usr/lib/atlas -llapack -lf77blas -lcblas -lgfortran"
lapack_cflags=""
AC_DEFINE([HAVE_LAPACK], 1, [Define if you have 'LAPACK' library]),
AC_MSG_ERROR([LAPACK w/ ATLAS is not installed]), -L/usr/lib/atlas -llapack -lf77blas -lcblas -lgfortran)
LAPACK_LIBS="$lapack_libs"
LAPACK_CFLAGS="$lapack_cflags"
LIBS="$ac_save_LIBS"

AC_ARG_WITH(gc, 
[  --with-gc		use garbage collector],
if test "$with_gc" = "yes"; then
	ac_save_LIBS="$LIBS"
	AC_CHECK_LIB(gccpp, main, 
	  gc_libs="-lgccpp -lgc" \
	  AC_DEFINE([HAVE_LIBGCCPP], 1, [Define if you want to use 'gc, gccpp' library to detect memory leaks]),
	  AC_MSG_WARN([gc or gccpp is not installed - gc is disabled]), -lgc)
	GC_LIBS="$GC_LIBS $gc_libs"
	LIBS="$ac_save_LIBS"
fi
)

AC_ARG_WITH(malloc-debug, 
[  --with-malloc-debug	use MallocDebug.app],
if test "$with_malloc_debug" = "yes"; then
	ac_save_LIBS="$LIBS"
	AC_CHECK_LIB(MallocDebug, main, 
	  malloc_debug_libs="-lMallocDebug" \
	  AC_DEFINE([HAVE_LIBMALLOCDEBUG], 1, [Define if you want to use 'MallocDebug.app']),
	  AC_MSG_WARN([libMallocDebug.a is not installed - MallocDebug is disabled]), -lMallocDebug)
	MALLOC_DEBUG_LIBS="$MALLOC_DEBUG_LIBS $malloc_debug_libs"
	LIBS="$ac_save_LIBS"
fi
)

AC_C_BIGENDIAN
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)

AC_SUBST(LTDL_LIBS)
AC_SUBST(GSL_LIBS)
AC_SUBST(FFTW_LIBS)
AC_SUBST(NIDAQMX_LIBS)
AC_SUBST(NIDAQMX_CFLAGS)
AC_SUBST(LINUXGPIB_LIBS)
AC_SUBST(LAPACK_LIBS)
AC_SUBST(LAPACK_CFLAGS)
AC_SUBST(RUBY_LIBS)
AC_SUBST(RUBY_CFLAGS)
AC_SUBST(FREETYPE2_LIBS)
AC_SUBST(FREETYPE2_CFLAGS)
AC_SUBST(GC_LIBS)
AC_SUBST(MALLOC_DEBUG_LIBS)

CPPFLAGS="$CPPFLAGS $RUBY_CFLAGS $FREETYPE2_CFLAGS $NIDAQMX_CFLAGS $LAPACK_CFLAGS"
